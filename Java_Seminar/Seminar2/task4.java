package Java_Seminar.Seminar2;
/*–ù–∞–ø–∏—à–∏—Ç–µ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏ –≤ –≤–∏–¥–µ
–º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä–æ–∫.
üìå –ù–∞–ø–∏—à–∏—Ç–µ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–∏—à–µ—Ç –º–∞—Å—Å–∏–≤, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã–π –ø—Ä–µ–¥—ã–¥—É—â–∏–º
–º–µ—Ç–æ–¥–æ–º –≤ —Ñ–∞–π–ª.
üìå –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –æ—à–∏–±–∫–∏ —Å –ø–æ–º–æ—â—å—é try-catch –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –í —Å–ª—É—á–∞–µ
–≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –ª–æ–≥-—Ñ–∞–π–ª.
üìå –ê —Ç–∞–∫–∂–µ –ù–∞–ø–∏—à–∏—Ç–µ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–∏–ø (—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ) —Ñ–∞–π–ª–æ–≤ –∏–∑
—Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏ –∏ –≤—ã–≤–µ–¥–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–¥–∞
1 –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: txt
2 –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: pdf
3 –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞:
4 –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: jpg*/
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
public class task4 {
    public static void execute(){
        try {
            String[] fileList = getFolderContents();
            writeArrayToFile("output.txt", fileList);
            printFileExtensions();
        } catch (IOException e) {
            writeExceptionToLog("error.log", e);
        }
    }

    public static String[] getFolderContents() {
        File folder = new File(".");
        File[] files = folder.listFiles();
        String[] fileList = new String[files.length];

        for (int i = 0; i < files.length; i++) {
            fileList[i] = files[i].getName();
        }

        return fileList;
    }

    public static void writeArrayToFile(String filename, String[] array) throws IOException {
        try (FileWriter writer = new FileWriter(filename)) {
            for (String item : array) {
                writer.write(item + "\n");
            }
            System.out.println("–ú–∞—Å—Å–∏–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤ —Ñ–∞–π–ª.");
        }
    }

    public static void printFileExtensions() {
        File folder = new File(".");
        File[] files = folder.listFiles();

        System.out.println("–†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ:");

        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                String extension = getFileExtension(files[i].getName());
                System.out.println((i + 1) + " –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: " + extension);
            }
        }
    }

    public static String getFileExtension(String filename) {
        int dotIndex = filename.lastIndexOf(".");
        if (dotIndex == -1) {
            return ""; // –ï—Å–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        }
        return filename.substring(dotIndex + 1);
    }

    public static void writeExceptionToLog(String filename, IOException e) {
        try (FileWriter writer = new FileWriter(filename)) {
            writer.write(e.toString());
            System.out.println("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ª–æ–≥-—Ñ–∞–π–ª: " + filename);
        } catch (IOException ex) {
            System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ª–æ–≥-—Ñ–∞–π–ª–∞: " + ex.getMessage());
        }
    }
}

